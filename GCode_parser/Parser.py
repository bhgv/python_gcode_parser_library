#-------------------------------------------------------------------------
#Parser.py -- ATG file parser
#Compiler Generator Coco/R,
#Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
#extended by M. Loeberbauer & A. Woess, Univ. of Linz
#ported from Java to Python by Ronald Longo
#
#This program is free software; you can redistribute it and/or modify it
#under the terms of the GNU General Public License as published by the
#Free Software Foundation; either version 2, or (at your option) any
#later version.
#
#This program is distributed in the hope that it will be useful, but
#WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#for more details.
#
#You should have received a copy of the GNU General Public License along
#with this program; if not, write to the Free Software Foundation, Inc.,
#59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#As an exception, it is allowed to write an extension of Coco/R that is
#used as a plugin in non-free software.
#
#If not otherwise stated, any source code generated by Coco/R (other than
#Coco/R itself) does not fall under the GNU General Public License.
#-------------------------------------------------------------------------*/

import sys

from Scanner import Token
from Scanner import Scanner
from Scanner import Position

class ErrorRec( object ):
   def __init__( self, l, c, s ):
      self.line   = l
      self.col    = c
      self.num    = 0
      self.str    = s


class Errors( object ):
   errMsgFormat = "file %(file)s : (%(line)d, %(col)d) %(text)s\n"
   eof          = False
   count        = 0         # number of errors detected
   fileName     = ''
   listName     = ''
   mergeErrors  = False
   mergedList   = None      # PrintWriter
   errors       = [ ]
   minErrDist   = 2
   errDist      = minErrDist
      # A function with prototype: f( errorNum=None ) where errorNum is a
      # predefined error number.  f returns a tuple, ( line, column, message )
      # such that line and column refer to the location in the
      # source file most recently parsed.  message is the error
      # message corresponging to errorNum.

   @staticmethod
   def Init( fn, dir, merge, getParsingPos, errorMessages ):
      Errors.theErrors = [ ]
      Errors.getParsingPos = getParsingPos
      Errors.errorMessages = errorMessages
      Errors.fileName = fn
      listName = dir + 'listing.txt'
      Errors.mergeErrors = merge
      if Errors.mergeErrors:
         try:
            Errors.mergedList = open( listName, 'w' )
         except IOError:
            raise RuntimeError( '-- Compiler Error: could not open ' + listName )

   @staticmethod
   def storeError( line, col, s ):
      if Errors.mergeErrors:
         Errors.errors.append( ErrorRec( line, col, s ) )
      else:
         Errors.printMsg( Errors.fileName, line, col, s )

   @staticmethod
   def SynErr( errNum, errPos=None ):
      line,col = errPos if errPos else Errors.getParsingPos( )
      msg = Errors.errorMessages[ errNum ]
      Errors.storeError( line, col, msg )
      Errors.count += 1

   @staticmethod
   def SemErr( errMsg, errPos=None ):
      line,col = errPos if errPos else Errors.getParsingPos( )
      Errors.storeError( line, col, errMsg )
      Errors.count += 1

   @staticmethod
   def Warn( errMsg, errPos=None ):
      line,col = errPos if errPos else Errors.getParsingPos( )
      Errors.storeError( line, col, errMsg )

   @staticmethod
   def Exception( errMsg ):
      print errMsg
      sys.exit( 1 )

   @staticmethod
   def printMsg( fileName, line, column, msg ):
      vals = { 'file':fileName, 'line':line, 'col':column, 'text':msg }
      sys.stdout.write( Errors.errMsgFormat % vals )

   @staticmethod
   def display( s, e ):
      Errors.mergedList.write('**** ')
      for c in xrange( 1, e.col ):
         if s[c-1] == '\t':
            Errors.mergedList.write( '\t' )
         else:
            Errors.mergedList.write( ' ' )
      Errors.mergedList.write( '^ ' + e.str + '\n')

   @staticmethod
   def Summarize( sourceBuffer ):
      if Errors.mergeErrors:
         # Initialize the line iterator
         srcLineIter = iter(sourceBuffer)
         srcLineStr  = srcLineIter.next( )
         srcLineNum  = 1

         try:
            # Initialize the error iterator
            errIter = iter(Errors.errors)
            errRec  = errIter.next( )

            # Advance to the source line of the next error
            while srcLineNum < errRec.line:
               Errors.mergedList.write( '%4d %s\n' % (srcLineNum, srcLineStr) )

               srcLineStr = srcLineIter.next( )
               srcLineNum += 1

            # Write out all errors for the current source line
            while errRec.line == srcLineNum:
               Errors.display( srcLineStr, errRec )

               errRec = errIter.next( )
         except:
            pass

         # No more errors to report
         try:
            # Advance to end of source file
            while True:
               Errors.mergedList.write( '%4d %s\n' % (srcLineNum, srcLineStr) )

               srcLineStr = srcLineIter.next( )
               srcLineNum += 1
         except:
            pass

         Errors.mergedList.write( '\n' )
         Errors.mergedList.write( '%d errors detected\n' % Errors.count )
         Errors.mergedList.close( )

      sys.stdout.write( '%d errors detected\n' % Errors.count )
      if (Errors.count > 0) and Errors.mergeErrors:
         sys.stdout.write( 'see ' + Errors.listName + '\n' )


class Parser( object ):
   _EOF = 0
   _ident = 1
   _number = 2
   _param = 3
   _nonGcodeCmdBody = 4
   _eolTok = 5
   maxT = 32

   T          = True
   x          = False
   minErrDist = 2

   gcode_test = True
   
   gcode_callbacks = {}
   gcode_callbacks_keys = []
   
   gcode_params = {}
   
   gcode_out = []
   gcode_out_last = ""
   
   
   def set_callback_dict(self, callback_dict=None):
      self.gcode_test = False
      
      if callback_dict:
         self.gcode_callbacks = callback_dict
         self.gcode_callbacks_keys = callback_dict.keys()
      else:
         self.gcode_callbacks = {}
         self.gcode_callbacks_keys = []
   
   
   def get_gcode_out(self):
      return self.gcode_out
   
   
   def print_gcode_out(self):
      for ln in self.gcode_out:
         print ln
   
   
   def _int_init(self):
      self.gcode_params = {}
      
      gcode_out = []
      gcode_out_last = ""
        

   def _int_is_callback_defined(self, key):
      return key and key in self.gcode_callbacks_keys and self.gcode_callbacks[key] != None
    
    
   def _int_call(self, key, param1=None, param2=None, param3=None):
      foo = self.gcode_callbacks[key]
      if key == "default":
         key = param1
         param1 = param2
         param2 = param3
         
      if self._int_is_callback_defined("self"):
         callback_self = self.gcode_callbacks["self"]
         if param1 == None:
            return foo(callback_self, key)
         elif param2 == None:
            return foo(callback_self, key, param1)
         elif param3 == None:
            return foo(callback_self, key, param1, param2)
         else:
            return foo(callback_self, key, param1, param2, param3)
      else:
         if param1 == None:
            return foo(key)
         elif param2 == None:
            return foo(key, param1)
         elif param3 == None:
            return foo(key, param1, param2)
         else:
            return foo(key, param1, param2, param3)
   
   
   def call(self, key, param=None):
      if self._int_is_callback_defined(key):
         out = self._int_call(key, param)
         if out:
            self.gcode_out_last += str(out)
      elif self._int_is_callback_defined("default"):
         out = self._int_call("default", key, param)
         if out:
            self.gcode_out_last += str(out)
      elif self._int_is_callback_defined("no_callback"):
         self._int_call("no_callback", key, param, self.getParsingPos())
      else:
         if key == "eol":
            if len(self.gcode_out_last) > 0:
               self.gcode_out.append(self.gcode_out_last)
               self.gcode_out_last = ""
         elif key:
            self.gcode_out_last += " " + key
            if param:
               self.gcode_out_last += param


   def set_param(self, key, param=None):
      if self._int_is_callback_defined("set_param"):
         self._int_call("set_param", key, param)
      elif key and param:
         self.gcode_params[key] = param


   def get_param(self, key):
      if self._int_is_callback_defined("get_param"):
         return self._int_call("get_param", key)
      elif key and self.gcode_params[key]:
         return self.gcode_params[key]
      else:
         return 0



   def __init__( self ):
      self.scanner     = None
      self.token       = None           # last recognized token
      self.la          = None           # lookahead token
      self.genScanner  = False
      self.tokenString = ''             # used in declarations of literal tokens
      self.noString    = '-none-'       # used in declarations of literal tokens
      self.errDist     = Parser.minErrDist

   def getParsingPos( self ):
      return self.la.line, self.la.col

   def SynErr( self, errNum ):
      if self.errDist >= Parser.minErrDist:
         Errors.SynErr( errNum )

      self.errDist = 0

   def SemErr( self, msg ):
      if self.errDist >= Parser.minErrDist:
         Errors.SemErr( msg )

      self.errDist = 0

   def Warning( self, msg ):
      if self.errDist >= Parser.minErrDist:
         Errors.Warn( msg )

      self.errDist = 0

   def Successful( self ):
      return Errors.count == 0;

   def LexString( self ):
      return self.token.val

   def LookAheadString( self ):
      return self.la.val

   def Get( self ):
      while True:
         self.token = self.la
         self.la = self.scanner.Scan( )
         if self.la.kind <= Parser.maxT:
            self.errDist += 1
            break
         
         self.la = self.token

   def Expect( self, n ):
      if self.la.kind == n:
         self.Get( )
      else:
         self.SynErr( n )

   def StartOf( self, s ):
      return self.set[s][self.la.kind]

   def ExpectWeak( self, n, follow ):
      if self.la.kind == n:
         self.Get( )
      else:
         self.SynErr( n )
         while not self.StartOf(follow):
            self.Get( )

   def WeakSeparator( self, n, syFol, repFol ):
      s = [ False for i in xrange( Parser.maxT+1 ) ]
      if self.la.kind == n:
         self.Get( )
         return True
      elif self.StartOf(repFol):
         return False
      else:
         for i in xrange( Parser.maxT ):
            s[i] = self.set[syFol][i] or self.set[repFol][i] or self.set[0][i]
         self.SynErr( n )
         while not s[self.la.kind]:
            self.Get( )
         return self.StartOf( syFol )

   def GCode( self ):
      if self.gcode_test:
         self._int_init() 
      
      while self.StartOf(1):
         if self.la.kind == 3:
            self.ParamDecl()
         elif self.la.kind == 4:
            self.NonGcodeCmd()
         else:
            while self.StartOf(2):
               self.GcodeCmd()

            self.Expect(5)
            self.call("eol") 

      self.Expect(0)
      if self.gcode_test:
         self.print_gcode_out() 
      

   def ParamDecl( self ):
      self.Expect(3)
      key = self.token.val 
      self.Expect(6)
      num = self.Number()
      self.set_param(key, num) 
      self.Expect(5)

   def NonGcodeCmd( self ):
      self.Expect(4)
      self.call("non_gcode_cmd", self.token.val[1:]) 
      self.Expect(5)

   def GcodeCmd( self ):
      cmd = ""
      num = ""
      
      if self.la.kind == 7 or self.la.kind == 8 or self.la.kind == 9:
         cmdLetter = self.CmdNoMoveAloneLetter()
         cmd = cmdLetter 
         if (self.la.kind == 2 or self.la.kind == 3):
            num = self.Number()
            cmd += num 
         self.call(cmd) 
      elif self.StartOf(3):
         cmdLetter = self.CmdNoMoveParamLetter()
         cmd = cmdLetter 
         num = self.Number()
         self.call(cmd, num) 
      elif self.StartOf(4):
         cmdLetter = self.CmdMoveLetter()
         cmd = cmdLetter 
         num = self.Number()
         self.call(cmd, num) 
      else:
         self.SynErr(33)

   def Number( self ):
      if self.la.kind == 2:
         self.Get( )
         num =  self.token.val 
      elif self.la.kind == 3:
         self.Get( )
         num = self.get_param(self.token.val) 
      else:
         self.SynErr(34)
      return num

   def CmdNoMoveAloneLetter( self ):
      cmdLetter = "" 
      if self.la.kind == 7:
         self.Get( )
      elif self.la.kind == 8:
         self.Get( )
      elif self.la.kind == 9:
         self.Get( )
      else:
         self.SynErr(35)
      cmdLetter = self.token.val.upper() 
      return cmdLetter

   def CmdNoMoveParamLetter( self ):
      cmdLetter = "" 
      if self.la.kind == 10:
         self.Get( )
      elif self.la.kind == 11:
         self.Get( )
      elif self.la.kind == 12:
         self.Get( )
      elif self.la.kind == 13:
         self.Get( )
      elif self.la.kind == 14:
         self.Get( )
      elif self.la.kind == 15:
         self.Get( )
      elif self.la.kind == 16:
         self.Get( )
      elif self.la.kind == 17:
         self.Get( )
      elif self.la.kind == 18:
         self.Get( )
      else:
         self.SynErr(36)
      cmdLetter = self.token.val.upper() 
      return cmdLetter

   def CmdMoveLetter( self ):
      cmdLetter = "" 
      if self.la.kind == 19:
         self.Get( )
      elif self.la.kind == 20:
         self.Get( )
      elif self.la.kind == 21:
         self.Get( )
      elif self.la.kind == 22:
         self.Get( )
      elif self.la.kind == 23:
         self.Get( )
      elif self.la.kind == 24:
         self.Get( )
      elif self.la.kind == 25:
         self.Get( )
      elif self.la.kind == 26:
         self.Get( )
      elif self.la.kind == 27:
         self.Get( )
      elif self.la.kind == 28:
         self.Get( )
      elif self.la.kind == 29:
         self.Get( )
      elif self.la.kind == 30:
         self.Get( )
      elif self.la.kind == 31:
         self.Get( )
      else:
         self.SynErr(37)
      cmdLetter = self.token.val.upper() 
      return cmdLetter



   def Parse( self, scanner ):
      self.scanner = scanner
      self.la = Token( )
      self.la.val = u''
      self.Get( )
      self.GCode()
      self.Expect(0)


   set = [
      [T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x],
      [x,x,x,T, T,T,x,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, x,x],
      [x,x,x,x, x,x,x,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, x,x],
      [x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x],
      [x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,T,T,T, T,T,T,T, T,T,T,T, x,x]

      ]

   errorMessages = {
      
      0 : "EOF expected",
      1 : "ident expected",
      2 : "number expected",
      3 : "param expected",
      4 : "nonGcodeCmdBody expected",
      5 : "eolTok expected",
      6 : "\"=\" expected",
      7 : "\"g\" expected",
      8 : "\"m\" expected",
      9 : "\"t\" expected",
      10 : "\"s\" expected",
      11 : "\"f\" expected",
      12 : "\"p\" expected",
      13 : "\"d\" expected",
      14 : "\"e\" expected",
      15 : "\"h\" expected",
      16 : "\"l\" expected",
      17 : "\"n\" expected",
      18 : "\"o\" expected",
      19 : "\"x\" expected",
      20 : "\"y\" expected",
      21 : "\"z\" expected",
      22 : "\"a\" expected",
      23 : "\"b\" expected",
      24 : "\"c\" expected",
      25 : "\"u\" expected",
      26 : "\"v\" expected",
      27 : "\"w\" expected",
      28 : "\"i\" expected",
      29 : "\"j\" expected",
      30 : "\"k\" expected",
      31 : "\"r\" expected",
      32 : "??? expected",
      33 : "invalid GcodeCmd",
      34 : "invalid Number",
      35 : "invalid CmdNoMoveAloneLetter",
      36 : "invalid CmdNoMoveParamLetter",
      37 : "invalid CmdMoveLetter",
      }


